Index: src/main/java/com/googlecode/concurrenttrees/permuterm/ConcurrentPermutermTree.java
===================================================================
--- src/main/java/com/googlecode/concurrenttrees/permuterm/ConcurrentPermutermTree.java	(revision )
+++ src/main/java/com/googlecode/concurrenttrees/permuterm/ConcurrentPermutermTree.java	(revision )
@@ -0,0 +1,403 @@
+/**
+ * Copyright 2012-2013 Niall Gallagher
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.googlecode.concurrenttrees.permuterm;
+
+import com.googlecode.concurrenttrees.common.CharSequences;
+import com.googlecode.concurrenttrees.common.KeyValuePair;
+import com.googlecode.concurrenttrees.common.LazyIterator;
+import com.googlecode.concurrenttrees.radix.ConcurrentRadixTree;
+import com.googlecode.concurrenttrees.radix.node.Node;
+import com.googlecode.concurrenttrees.radix.node.NodeFactory;
+import com.googlecode.concurrenttrees.radix.node.util.PrettyPrintable;
+
+import java.util.*;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+
+/**
+ * An implementation of {@link PermutermTree} which supports lock-free concurrent reads, and allows items to be
+ * added to and to be removed from the tree <i>atomically</i> by background thread(s), without blocking reads.
+ * <p/>
+ * This implementation is based on {@link com.googlecode.concurrenttrees.radix.ConcurrentRadixTree}.
+ *
+ * @author Niall Gallagher
+ */
+public class ConcurrentPermutermTree<O> implements PermutermTree<O>, PrettyPrintable {
+
+    class ConcurrentPermutermTreeImpl<V> extends ConcurrentRadixTree<V> {
+
+        public ConcurrentPermutermTreeImpl(NodeFactory nodeFactory) {
+            super(nodeFactory);
+        }
+
+        public ConcurrentPermutermTreeImpl(NodeFactory nodeFactory, boolean restrictConcurrency) {
+            super(nodeFactory, restrictConcurrency);
+        }
+
+        @Override
+        protected void acquireWriteLock() {
+            super.acquireWriteLock();
+        }
+
+        @Override
+        protected void releaseWriteLock() {
+            super.releaseWriteLock();
+        }
+    }
+
+    private final ConcurrentPermutermTreeImpl<Set<String>> radixTree;
+    private final ConcurrentMap<String, O> valueMap;
+//    private final char terminator = '\u0000';
+    private final char terminator = '$';
+
+    /**
+     * Creates a new {@link ConcurrentPermutermTree} which will use the given {@link com.googlecode.concurrenttrees.radix.node.NodeFactory} to create nodes.
+     *
+     * @param nodeFactory An object which creates {@link com.googlecode.concurrenttrees.radix.node.Node} objects
+     * on-demand, and which might return node implementations optimized for storing the values supplied to it for
+     * the creation of each node
+     */
+    public ConcurrentPermutermTree(NodeFactory nodeFactory) {
+        this.radixTree = new ConcurrentPermutermTreeImpl<Set<String>>(nodeFactory);
+        this.valueMap = new ConcurrentHashMap<String, O>();
+    }
+
+    /**
+     * Creates a new {@link ConcurrentPermutermTree} which will use the given {@link com.googlecode.concurrenttrees.radix.node.NodeFactory} to create nodes.
+     *
+     * @param nodeFactory An object which creates {@link com.googlecode.concurrenttrees.radix.node.Node} objects
+     * on-demand, and which might return node implementations optimized for storing the values supplied to it for the
+     * creation of each node
+     * @param restrictConcurrency If true, configures use of a {@link java.util.concurrent.locks.ReadWriteLock} allowing
+     * concurrent reads, except when writes are being performed by other threads, in which case writes block all reads;
+     * if false, configures lock-free reads; allows concurrent non-blocking reads, even if writes are being performed
+     * by other threads
+     */
+    public ConcurrentPermutermTree(NodeFactory nodeFactory, boolean restrictConcurrency) {
+        this.radixTree = new ConcurrentPermutermTreeImpl<Set<String>>(nodeFactory, restrictConcurrency);
+        this.valueMap = new ConcurrentHashMap<String, O>();
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public O put(CharSequence key, O value) {
+        if (key == null) {
+            throw new IllegalArgumentException("The key argument was null");
+        }
+        if (key.length() == 0) {
+            throw new IllegalArgumentException("The key argument was zero-length");
+        }
+        if (value == null) {
+            throw new IllegalArgumentException("The value argument was null");
+        }
+        radixTree.acquireWriteLock();
+        try {
+            // We convert to string (for now) due to lack of equals() and hashCode() support in CharSequence...
+            String keyString = CharSequences.toString(key);
+
+            // Put/replace value in map before we add suffixes to the tree
+            // (prevents reading threads finding suffixes with no value)...
+            final O replacedValue = valueMap.put(keyString, value);
+
+            // We only need to modify the tree if we have not added this key before...
+            if (replacedValue == null) {
+                addRotationsToRadixTree(keyString);
+            }
+            return replacedValue; // might be null
+        }
+        finally {
+            radixTree.releaseWriteLock();
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public O putIfAbsent(CharSequence key, O value) {
+        radixTree.acquireWriteLock();
+        try {
+            // We convert to string (for now) due to lack of equals() and hashCode() support in CharSequence...
+            String keyString = CharSequences.toString(key);
+
+            // Put/replace value in map only if key is absent, before we add suffixes to the tree
+            // (prevents reading threads finding suffixes with no value)...
+            final O existingValue = valueMap.putIfAbsent(keyString, value);
+
+            // We only need to modify the tree if we have not added this key before...
+            if (existingValue == null) {
+                // Key is not already in tree, add it now...
+                addRotationsToRadixTree(keyString);
+            }
+            // else we have not made any changes
+
+            return existingValue; // might be null
+        }
+        finally {
+            radixTree.releaseWriteLock();
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public boolean remove(CharSequence key) {
+        radixTree.acquireWriteLock();
+        try {
+            // We convert to string (for now) due to lack of equals() and hashCode() support in CharSequence...
+            String keyString = CharSequences.toString(key);
+            O value = valueMap.get(keyString);
+
+            if (value == null) {
+                // Key was not stored, no need to do anything, return false...
+                return false;
+            }
+            // Remove suffixes from the tree...
+            removeRotationsFromRadixTree(keyString);
+            valueMap.remove(keyString);
+            return true;
+        }
+        finally {
+            radixTree.releaseWriteLock();
+        }
+    }
+
+    void addRotationsToRadixTree(String keyAsString) {
+        Iterable<CharSequence> suffixes = CharSequences.generateRotations(keyAsString, terminator);
+        for (CharSequence suffix : suffixes) {
+            Set<String> originalKeyRefs = radixTree.getValueForExactKey(suffix);
+            if (originalKeyRefs == null) {
+                originalKeyRefs = createSetForOriginalKeys();
+                radixTree.put(suffix, originalKeyRefs);
+            }
+            originalKeyRefs.add(keyAsString);
+        }
+    }
+
+    void removeRotationsFromRadixTree(String keyAsString) {
+        Iterable<CharSequence> suffixes = CharSequences.generateRotations(keyAsString, terminator);
+        for (CharSequence suffix : suffixes) {
+            Set<String> originalKeyRefs = radixTree.getValueForExactKey(suffix);
+            originalKeyRefs.remove(keyAsString);
+
+            if (originalKeyRefs.isEmpty()) {
+                // We just removed the last original key which shares this suffix.
+                // Remove the suffix from the tree entirely...
+                radixTree.remove(suffix);
+            }
+            // else leave the suffix in the tree, as it is a common suffix of another key.
+        }
+    }
+
+    /**
+     * Creates a new {@link java.util.Set} in which original keys from which a suffix was generated can be stored.
+     * <p/>
+     * By default this method creates a new concurrent set based on {@link java.util.concurrent.ConcurrentHashMap}.
+     * <p/>
+     * Subclasses could override this method to create an alternative set.
+     * <p/>
+     * Specifically it is expected that this would be useful in unit tests,
+     * where sets with consistent iteration order would be useful.
+     *
+     * @return A new {@link java.util.Set} in which original keys from which a suffix was generated can be stored
+     */
+    protected Set<String> createSetForOriginalKeys() {
+        return Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public Iterable<CharSequence> getKeysMatching(boolean leadingWildcard, boolean trailingWildcard, CharSequence first, CharSequence... rest) {
+        final CharSequence query; // TODO: compose query, also implement post-filtering
+        switch (rest.length) {
+            case 0: {
+                if (leadingWildcard && trailingWildcard) {
+                    query = first;
+                }
+                else if (leadingWildcard) {
+                    query = CharSequences.concatenate(first, String.valueOf(terminator));
+                }
+                else if (trailingWildcard) {
+                    query = CharSequences.concatenate(String.valueOf(terminator), first);
+                }
+                else {
+                    return valueMap.containsKey(CharSequences.toString(first)) ? Collections.singleton(first) : Collections.<CharSequence>emptySet();
+                }
+                break;
+            }
+            case 1: {
+                if (leadingWildcard && trailingWildcard) {
+                    throw new IllegalStateException("Failed to compose query: leadingWildcard: " + leadingWildcard + ", trailingWildcard: " + trailingWildcard + ", first: " + first + ", rest: " + Arrays.toString(rest));
+                }
+                else if (leadingWildcard) {
+                    throw new IllegalStateException("Failed to compose query: leadingWildcard: " + leadingWildcard + ", trailingWildcard: " + trailingWildcard + ", first: " + first + ", rest: " + Arrays.toString(rest));
+                }
+                else if (trailingWildcard) {
+                    throw new IllegalStateException("Failed to compose query: leadingWildcard: " + leadingWildcard + ", trailingWildcard: " + trailingWildcard + ", first: " + first + ", rest: " + Arrays.toString(rest));
+                }
+                else {
+                    query = CharSequences.concatenate(CharSequences.concatenate(rest[0], String.valueOf(terminator)), first);
+                }
+                break;
+            }
+
+            default: throw new IllegalStateException("Failed to compose query: leadingWildcard: " + leadingWildcard + ", trailingWildcard: " + trailingWildcard + ", first: " + first + ", rest: " + Arrays.toString(rest));
+        }
+        System.out.println("Query: [" + query + "]");
+        return new Iterable<CharSequence>() {
+            @Override
+            public Iterator<CharSequence> iterator() {
+                return new LazyIterator<CharSequence>() {
+
+                    Iterator<Set<String>> originalKeysSets = radixTree.getValuesForKeysStartingWith(query).iterator();
+                    Iterator<String> keyIterator = Collections.<String>emptyList().iterator();
+
+                    // A given fragment can be contained many times within the same key, so track keys processed
+                    // so far, so that we can avoid re-processing the same key multiple times...
+                    Set<String> keysAlreadyProcessed = new HashSet<String>();
+
+                    @Override
+                    protected CharSequence computeNext() {
+                        String nextKey = null;
+                        while (nextKey == null) {
+                            while (!keyIterator.hasNext()) {
+                                if (!originalKeysSets.hasNext()) {
+                                    return endOfData();
+                                }
+                                keyIterator = originalKeysSets.next().iterator();
+                            }
+                            nextKey = keyIterator.next();
+                            if (!keysAlreadyProcessed.add(nextKey)) {
+                                // The set already contained the key, hence we don't reprocess it...
+                                nextKey = null;
+                            }
+                        }
+                        return nextKey;
+                    }
+                };
+            }
+        };
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public Iterable<O> getValuesForKeysMatching(boolean leadingWildcard, boolean trailingWildcard, CharSequence first, CharSequence... rest) {
+        final CharSequence query = null; // TODO: compose query, also implement post-filtering
+        return new Iterable<O>() {
+            @Override
+            public Iterator<O> iterator() {
+                return new LazyIterator<O>() {
+
+                    Iterator<Set<String>> originalKeysSets = radixTree.getValuesForKeysStartingWith(query).iterator();
+                    Iterator<String> keyIterator = Collections.<String>emptyList().iterator();
+
+                    // A given fragment can be contained many times within the same key, so track keys processed
+                    // so far, so that we can avoid re-processing the same key multiple times...
+                    Set<String> keysAlreadyProcessed = new HashSet<String>();
+
+                    @Override
+                    protected O computeNext() {
+                        O value = null;
+                        while (value == null) {
+                            while (!keyIterator.hasNext()) {
+                                if (!originalKeysSets.hasNext()) {
+                                    return endOfData();
+                                }
+                                keyIterator = originalKeysSets.next().iterator();
+                            }
+                            String originalKey = keyIterator.next();
+
+                            if (keysAlreadyProcessed.add(originalKey)) {
+                                // Key was not in the already-processed set, so proceed with looking up the value...
+                                value = valueMap.get(originalKey);
+
+                                // value could still be null due to race condition if key/value was removed while
+                                // iterating, hence if so, we loop again to find the next non-null key/value...
+                            }
+                        }
+                        return value;
+                    }
+                };
+            }
+        };
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public Iterable<KeyValuePair<O>> getKeyValuePairsForKeysMatching(boolean leadingWildcard, boolean trailingWildcard, CharSequence first, CharSequence... rest) {
+        final CharSequence query = null; // TODO: compose query, also implement post-filtering
+        return new Iterable<KeyValuePair<O>>() {
+            @Override
+            public Iterator<KeyValuePair<O>> iterator() {
+                return new LazyIterator<KeyValuePair<O>>() {
+
+                    Iterator<Set<String>> originalKeysSets = radixTree.getValuesForKeysStartingWith(query).iterator();
+                    Iterator<String> keyIterator = Collections.<String>emptyList().iterator();
+
+                    // A given fragment can be contained many times within the same key, so track keys processed
+                    // so far, so that we can avoid re-processing the same key multiple times...
+                    Set<String> keysAlreadyProcessed = new HashSet<String>();
+
+                    @Override
+                    protected KeyValuePair<O> computeNext() {
+                        String originalKey = null;
+                        O value = null;
+                        while (value == null) {
+                            while (!keyIterator.hasNext()) {
+                                if (!originalKeysSets.hasNext()) {
+                                    return endOfData();
+                                }
+                                keyIterator = originalKeysSets.next().iterator();
+                            }
+                            originalKey = keyIterator.next();
+
+                            if (keysAlreadyProcessed.add(originalKey)) {
+                                // Key was not in the already-processed set, so proceed with looking up the value...
+                                value = valueMap.get(originalKey);
+
+                                // value could still be null due to race condition if key/value was removed while
+                                // iterating, hence if so, we loop again to find the next non-null key/value...
+                            }
+                        }
+                        return new ConcurrentRadixTree.KeyValuePairImpl<O>(originalKey, value);
+                    }
+                };
+            }
+        };
+    }
+
+    /**
+     * Utility method to return an iterator for the given iterable, or an empty iterator if the iterable is null.
+     */
+    @SuppressWarnings({"JavaDoc"})
+    static <T> Iterator<T> nullSafeIterator(Iterable<T> iterable) {
+        return iterable == null ? Collections.<T>emptyList().iterator() : iterable.iterator();
+    }
+
+    @Override
+    public Node getNode() {
+        return radixTree.getNode();
+    }
+}
Index: src/test/java/com/googlecode/concurrenttrees/permuterm/ConcurrentPermutermTreeTest.java
===================================================================
--- src/test/java/com/googlecode/concurrenttrees/permuterm/ConcurrentPermutermTreeTest.java	(revision )
+++ src/test/java/com/googlecode/concurrenttrees/permuterm/ConcurrentPermutermTreeTest.java	(revision )
@@ -0,0 +1,222 @@
+package com.googlecode.concurrenttrees.permuterm;
+
+import com.googlecode.concurrenttrees.common.CharSequences;
+import com.googlecode.concurrenttrees.common.Iterables;
+import com.googlecode.concurrenttrees.common.PrettyPrinter;
+import com.googlecode.concurrenttrees.radix.node.NodeFactory;
+import com.googlecode.concurrenttrees.radix.node.concrete.DefaultCharArrayNodeFactory;
+import com.googlecode.concurrenttrees.permuterm.ConcurrentPermutermTree;
+import org.junit.Test;
+
+import java.util.Collections;
+import java.util.LinkedHashSet;
+import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+
+import static org.junit.Assert.*;
+import static org.junit.Assert.assertTrue;
+
+/**
+ * @author Niall Gallagher
+ */
+public class ConcurrentPermutermTreeTest {
+
+    private final NodeFactory nodeFactory = new DefaultCharArrayNodeFactory();
+
+    @Test
+    public void testPut_SingleKey() throws Exception {
+        ConcurrentPermutermTree<Integer> tree = newConcurrentPermutermTreeForUnitTests();
+        tree.put("BANANA", 1);
+
+        // Rotations:
+        //
+        //    BANANA$
+        //    ANANA$B
+        //    NANA$BA
+        //    ANA$BAN
+        //    NA$BANA
+        //    A$BANAN
+        //    $BANANA
+
+        // Expected permuterm tree:
+        //
+        //    ?
+        //    ??? ? $BANANA ([BANANA])
+        //    ??? ? A
+        //    ?   ??? ? $BANAN ([BANANA])
+        //    ?   ??? ? NA
+        //    ?       ??? ? $BAN ([BANANA])
+        //    ?       ??? ? NA$B ([BANANA])
+        //    ??? ? BANANA$ ([BANANA])
+        //    ??? ? NA
+        //        ??? ? $BANA ([BANANA])
+        //        ??? ? NA$BA ([BANANA])
+
+
+        String expected =
+                "?\n" +
+                "??? ? $BANANA ([BANANA])\n" +
+                "??? ? A\n" +
+                "?   ??? ? $BANAN ([BANANA])\n" +
+                "?   ??? ? NA\n" +
+                "?       ??? ? $BAN ([BANANA])\n" +
+                "?       ??? ? NA$B ([BANANA])\n" +
+                "??? ? BANANA$ ([BANANA])\n" +
+                "??? ? NA\n" +
+                "    ??? ? $BANA ([BANANA])\n" +
+                "    ??? ? NA$BA ([BANANA])\n";
+
+        String actual = PrettyPrinter.prettyPrint(tree);
+        assertEquals(expected, actual);
+    }
+
+    @Test
+    public void testPut_MultipleKeys() throws Exception {
+        ConcurrentPermutermTree<Integer> tree = newConcurrentPermutermTreeForUnitTests();
+        tree.put("BANANA", 1);
+        tree.put("BANDANA", 2);
+
+        // Rotations:
+        //
+        //    BANANA$
+        //    ANANA$B
+        //    NANA$BA
+        //    ANA$BAN
+        //    NA$BANA
+        //    A$BANAN
+        //    $BANANA
+        //
+        //    BANDANA$
+        //    ANDANA$B
+        //    NDANA$BA
+        //    DANA$BAN
+        //    ANA$BAND
+        //    NA$BANDA
+        //    A$BANDAN
+        //    $BANDANA
+
+        // Expected permuterm tree:
+        //
+        //    ?
+        //    ??? ? $BAN
+        //    ?   ??? ? ANA ([BANANA])
+        //    ?   ??? ? DANA ([BANDANA])
+        //    ??? ? A
+        //    ?   ??? ? $BAN
+        //    ?   ?   ??? ? AN ([BANANA])
+        //    ?   ?   ??? ? DAN ([BANDANA])
+        //    ?   ??? ? N
+        //    ?       ??? ? A
+        //    ?       ?   ??? ? $BAN ([BANANA])
+        //    ?       ?   ?   ??? ? D ([BANDANA])
+        //    ?       ?   ??? ? NA$B ([BANANA])
+        //    ?       ??? ? DANA$B ([BANDANA])
+        //    ??? ? BAN
+        //    ?   ??? ? ANA$ ([BANANA])
+        //    ?   ??? ? DANA$ ([BANDANA])
+        //    ??? ? DANA$BAN ([BANDANA])
+        //    ??? ? N
+        //        ??? ? A
+        //        ?   ??? ? $BAN
+        //        ?   ?   ??? ? A ([BANANA])
+        //        ?   ?   ??? ? DA ([BANDANA])
+        //        ?   ??? ? NA$BA ([BANANA])
+        //        ??? ? DANA$BA ([BANDANA])
+
+
+
+        String expected =
+                "?\n" +
+                "??? ? $BAN\n" +
+                "?   ??? ? ANA ([BANANA])\n" +
+                "?   ??? ? DANA ([BANDANA])\n" +
+                "??? ? A\n" +
+                "?   ??? ? $BAN\n" +
+                "?   ?   ??? ? AN ([BANANA])\n" +
+                "?   ?   ??? ? DAN ([BANDANA])\n" +
+                "?   ??? ? N\n" +
+                "?       ??? ? A\n" +
+                "?       ?   ??? ? $BAN ([BANANA])\n" +
+                "?       ?   ?   ??? ? D ([BANDANA])\n" +
+                "?       ?   ??? ? NA$B ([BANANA])\n" +
+                "?       ??? ? DANA$B ([BANDANA])\n" +
+                "??? ? BAN\n" +
+                "?   ??? ? ANA$ ([BANANA])\n" +
+                "?   ??? ? DANA$ ([BANDANA])\n" +
+                "??? ? DANA$BAN ([BANDANA])\n" +
+                "??? ? N\n" +
+                "    ??? ? A\n" +
+                "    ?   ??? ? $BAN\n" +
+                "    ?   ?   ??? ? A ([BANANA])\n" +
+                "    ?   ?   ??? ? DA ([BANDANA])\n" +
+                "    ?   ??? ? NA$BA ([BANANA])\n" +
+                "    ??? ? DANA$BA ([BANDANA])\n";
+        String actual = PrettyPrinter.prettyPrint(tree);
+        assertEquals(expected, actual);
+    }
+
+    @Test
+    public void testGetKeysMatching() throws Exception {
+        ConcurrentPermutermTree<Integer> tree = newConcurrentPermutermTreeForUnitTests();
+
+        tree.put("HOCUS POCUS ALAKAZAM", 1);
+        tree.put("HOCUS LOCUS ALAKAZAM", 2);
+        tree.put("AVADA KEDAVRA", 3);
+
+        // "X" (no wildcards)...
+        assertEquals("[HOCUS POCUS ALAKAZAM]", Iterables.toString(tree.getKeysMatching(false, false, "HOCUS POCUS ALAKAZAM")));
+        assertEquals("[]", Iterables.toString(tree.getKeysMatching(false, false, "HOCUS")));
+        assertEquals("[]", Iterables.toString(tree.getKeysMatching(false, false, "POCUS")));
+        assertEquals("[]", Iterables.toString(tree.getKeysMatching(false, false, "ALAKAZAM")));
+
+        // "X*"...
+        assertEquals("[HOCUS POCUS ALAKAZAM]", Iterables.toString(tree.getKeysMatching(false, true, "HOCUS POCUS")));
+        assertEquals("[]", Iterables.toString(tree.getKeysMatching(false, true, "POCUS ALAKAZAM")));
+        assertEquals("[HOCUS LOCUS ALAKAZAM, HOCUS POCUS ALAKAZAM]", Iterables.toString(tree.getKeysMatching(false, true, "HOCUS")));
+
+        // "*X"...
+        assertEquals("[HOCUS POCUS ALAKAZAM]", Iterables.toString(tree.getKeysMatching(true, false, "POCUS ALAKAZAM")));
+        assertEquals("[]", Iterables.toString(tree.getKeysMatching(true, false, "HOCUS POCUS")));
+        assertEquals("[HOCUS LOCUS ALAKAZAM, HOCUS POCUS ALAKAZAM]", Iterables.toString(tree.getKeysMatching(true, false, "ALAKAZAM")));
+
+        // "*X*"...
+        assertEquals("[HOCUS LOCUS ALAKAZAM, HOCUS POCUS ALAKAZAM]", Iterables.toString(tree.getKeysMatching(true, true, "HOCUS")));
+        assertEquals("[HOCUS LOCUS ALAKAZAM, HOCUS POCUS ALAKAZAM]", Iterables.toString(tree.getKeysMatching(true, true, "ALAKAZAM")));
+        assertEquals("[HOCUS POCUS ALAKAZAM]", Iterables.toString(tree.getKeysMatching(true, true, "POCUS")));
+        assertEquals("[]", Iterables.toString(tree.getKeysMatching(true, true, "FOCUS")));
+
+        // "X*Y"...
+        assertEquals("[HOCUS LOCUS ALAKAZAM, HOCUS POCUS ALAKAZAM]", Iterables.toString(tree.getKeysMatching(false, false, "HOCUS", "ALAKAZAM")));
+        assertEquals("[]", Iterables.toString(tree.getKeysMatching(false, false, "HOCUS", "POCUS")));
+        assertEquals("[]", Iterables.toString(tree.getKeysMatching(false, false, "POCUS", "ALAKAZAM")));
+
+    }
+    @Test
+    public void testRestrictConcurrency() {
+        ConcurrentPermutermTree<Integer> tree = new ConcurrentPermutermTree<Integer>(nodeFactory, true);
+        assertNotNull(tree);
+    }
+
+    @Test
+    public void testCreateSetForOriginalKeys() {
+        // Test the default (production) implementation of this method, should return a set based on ConcurrentHashMap...
+        ConcurrentPermutermTree<Integer> tree = new ConcurrentPermutermTree<Integer>(nodeFactory, true);
+        assertTrue(tree.createSetForOriginalKeys().getClass().equals(Collections.newSetFromMap(new ConcurrentHashMap<Object, Boolean>()).getClass()));
+    }
+
+    /**
+     * Creates a new {@link ConcurrentPermutermTree} but overrides
+     * {@link com.googlecode.concurrenttrees.permuterm.ConcurrentPermutermTree#createSetForOriginalKeys()} to return a set
+     * which provides consistent iteration order (useful for unit tests).
+     */
+    @SuppressWarnings({"JavaDoc"})
+    <O> ConcurrentPermutermTree<O> newConcurrentPermutermTreeForUnitTests() {
+        return new ConcurrentPermutermTree<O>(nodeFactory) {
+            // Override this method to return a set which has consistent iteration order, for unit testing...
+            @Override
+            protected Set<String> createSetForOriginalKeys() {
+                return new LinkedHashSet<String>();
+            }
+        };
+    }
+}
Index: src/main/java/com/googlecode/concurrenttrees/permuterm/PermutermTree.java
===================================================================
--- src/main/java/com/googlecode/concurrenttrees/permuterm/PermutermTree.java	(revision )
+++ src/main/java/com/googlecode/concurrenttrees/permuterm/PermutermTree.java	(revision )
@@ -0,0 +1,194 @@
+/**
+ * Copyright 2012-2013 Niall Gallagher
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.googlecode.concurrenttrees.permuterm;
+
+import com.googlecode.concurrenttrees.common.KeyValuePair;
+
+/**
+ * API of a generalized suffix tree, that is a tree which allows values to be looked up based on any suffix of the keys
+ * with which they were associated, as well as based on exact matches for keys. A suffix tree essentially allows
+ * <i><u>"equals"</u></i>, <i><u>"ends with"</u></i> and <i><u>"contains"</u></i> lookup.
+ * <p/>
+ * See documentation on each method for details.
+ *
+ * @param <O> The type of the values associated with keys in the tree
+ *
+ * @author Niall Gallagher
+ */
+public interface PermutermTree<O> {
+
+    /**
+     * Associates the given value with the given key; replacing any previous value associated with the key.
+     * Returns the previous value associated with the key, if any.
+     * <p/>
+     * This operation is performed atomically.
+     *
+     * @param key The key with which the specified value should be associated
+     * @param value The value to associate with the key, which cannot be null
+     * @return The previous value associated with the key, if there was one, otherwise null
+     */
+    O put(CharSequence key, O value);
+
+    /**
+     * If a value is not already associated with the given key in the tree, associates the given value with the
+     * key; otherwise if an existing value is already associated, returns the existing value and does not overwrite it.
+     * <p/>
+     * This operation is performed atomically.
+     *
+     * @param key The key with which the specified value should be associated
+     * @param value The value to associate with the key, which cannot be null
+     * @return The existing value associated with the key, if there was one; otherwise null in which case the new
+     * value was successfully associated
+     */
+    O putIfAbsent(CharSequence key, O value);
+
+    /**
+     * Removes the value associated with the given key (exact match).
+     * If no value is associated with the key, does nothing.
+     *
+     * @param key The key for which an associated value should be removed
+     * @return True if a value was removed (and therefore was associated with the key), false if no value was
+     * associated/removed
+     */
+    boolean remove(CharSequence key);
+
+    /**
+     * Returns a lazy iterable which returns the set of keys in the tree which match the given terms and wildcards.
+     * <p/>
+     * Note that only the first and, if provided, the last terms supplied, will be used to access the tree.
+     * Matching for terms in the middle, will be evaluated via filtering.
+     * <p/>
+     * Example queries:
+     * <ul>
+     *     <li>
+     *         X -> invoke (false, false, X)
+     *     </li>
+     *     <li>
+     *         X* -> invoke (false, true, X)
+     *     </li>
+     *     <li>
+     *         *X -> invoke (true, false, X)
+     *     </li>
+     *     <li>
+     *         *X* -> invoke (true, true, X)
+     *     </li>
+     *     <li>
+     *         X*Y -> invoke (false, false, X, Y)
+     *     </li>
+     *     <li>
+     *         X*Y*Z -> invoke (false, false, X, Y, Z)
+     *     </li>
+     *     <li>
+     *         *X*Y*Z -> invoke (true, false, X, Y, Z)
+     *     </li>
+     *     <li>
+     *         *X*Y*Z* -> invoke (true, true, X, Y, Z)
+     *     </li>
+     * </ul>
+     *
+     * @param leadingWildcard Indicates if the query should have a leading wildcard
+     * @param trailingWildcard Indicates if the query should have a trailing wildcard
+     * @param first The first term
+     * @param rest Any additional terms (wildcards exist implicitly between terms [else terms would be joined!])
+     * @return The set of keys in the tree which match the given terms and wildcards
+     */
+    Iterable<CharSequence> getKeysMatching(boolean leadingWildcard, boolean trailingWildcard, CharSequence first, CharSequence... rest);
+
+    /**
+     * Returns a lazy iterable which returns the set of values associated with keys in the tree which match the given terms and wildcards.
+     * <p/>
+     * Note that only the first and, if provided, the last terms supplied, will be used to access the tree.
+     * Matching for terms in the middle, will be evaluated via filtering.
+     * <p/>
+     * Example queries:
+     * <ul>
+     *     <li>
+     *         X -> invoke (false, false, X)
+     *     </li>
+     *     <li>
+     *         X* -> invoke (false, true, X)
+     *     </li>
+     *     <li>
+     *         *X -> invoke (true, false, X)
+     *     </li>
+     *     <li>
+     *         *X* -> invoke (true, true, X)
+     *     </li>
+     *     <li>
+     *         X*Y -> invoke (false, false, X, Y)
+     *     </li>
+     *     <li>
+     *         X*Y*Z -> invoke (false, false, X, Y, Z)
+     *     </li>
+     *     <li>
+     *         *X*Y*Z -> invoke (true, false, X, Y, Z)
+     *     </li>
+     *     <li>
+     *         *X*Y*Z* -> invoke (true, true, X, Y, Z)
+     *     </li>
+     * </ul>
+     *
+     * @param leadingWildcard Indicates if the query should have a leading wildcard
+     * @param trailingWildcard Indicates if the query should have a trailing wildcard
+     * @param first The first term
+     * @param rest Any additional terms (wildcards exist implicitly between terms [else terms would be joined!])
+     * @return The set of values associated with keys in the tree which match the given terms and wildcards
+     */
+    Iterable<O> getValuesForKeysMatching(boolean leadingWildcard, boolean trailingWildcard, CharSequence first, CharSequence... rest);
+
+    /**
+     * Returns a lazy iterable which returns the set of {@link KeyValuePair}s for keys and their associated values in
+     * the tree, where the keys in the tree which match the given terms and wildcards.
+     * <p/>
+     * Note that only the first and, if provided, the last terms supplied, will be used to access the tree.
+     * Matching for terms in the middle, will be evaluated via filtering.
+     * <p/>
+     * Example queries:
+     * <ul>
+     *     <li>
+     *         X -> invoke (false, false, X)
+     *     </li>
+     *     <li>
+     *         X* -> invoke (false, true, X)
+     *     </li>
+     *     <li>
+     *         *X -> invoke (true, false, X)
+     *     </li>
+     *     <li>
+     *         *X* -> invoke (true, true, X)
+     *     </li>
+     *     <li>
+     *         X*Y -> invoke (false, false, X, Y)
+     *     </li>
+     *     <li>
+     *         X*Y*Z -> invoke (false, false, X, Y, Z)
+     *     </li>
+     *     <li>
+     *         *X*Y*Z -> invoke (true, false, X, Y, Z)
+     *     </li>
+     *     <li>
+     *         *X*Y*Z* -> invoke (true, true, X, Y, Z)
+     *     </li>
+     * </ul>
+     *
+     * @param leadingWildcard Indicates if the query should have a leading wildcard
+     * @param trailingWildcard Indicates if the query should have a trailing wildcard
+     * @param first The first term
+     * @param rest Any additional terms (wildcards exist implicitly between terms [else terms would be joined!])
+     * @return The set of {@link KeyValuePair}s for keys in the tree which match the given terms and wildcards
+     */
+    Iterable<KeyValuePair<O>> getKeyValuePairsForKeysMatching(boolean leadingWildcard, boolean trailingWildcard, CharSequence first, CharSequence... rest);
+}
Index: src/main/java/com/googlecode/concurrenttrees/common/CharSequences.java
===================================================================
--- src/main/java/com/googlecode/concurrenttrees/common/CharSequences.java	(revision 287)
+++ src/main/java/com/googlecode/concurrenttrees/common/CharSequences.java	(revision )
@@ -78,6 +78,36 @@
         };
     }
 
+    public static Iterable<CharSequence> generateRotations(final CharSequence input, final char terminator) {
+        return new Iterable<CharSequence>() {
+            @Override
+            public Iterator<CharSequence> iterator() {
+                return new Iterator<CharSequence>() {
+                    int currentIndex = 0;
+                    @Override
+                    public boolean hasNext() {
+                        return currentIndex <= input.length();
+                    }
+
+                    @Override
+                    public CharSequence next() {
+                        StringBuilder sb = new StringBuilder();
+                        sb.append(input.subSequence(currentIndex, input.length()));
+                        sb.append(terminator);
+                        sb.append(input.subSequence(0, currentIndex));
+                        currentIndex++;
+                        return sb;
+                    }
+
+                    @Override
+                    public void remove() {
+                        throw new UnsupportedOperationException("Modification not supported");
+                    }
+                };
+            }
+        };
+    }
+
     public static CharSequence getCommonPrefix(CharSequence first, CharSequence second) {
         int minLength = Math.min(first.length(), second.length());
         for (int i = 0; i < minLength; i++) {
Index: src/test/java/com/googlecode/concurrenttrees/common/CharSequencesTest.java
===================================================================
--- src/test/java/com/googlecode/concurrenttrees/common/CharSequencesTest.java	(revision 287)
+++ src/test/java/com/googlecode/concurrenttrees/common/CharSequencesTest.java	(revision )
@@ -64,6 +64,25 @@
     }
 
     @Test
+    public void testGenerateRotations() throws Exception {
+        final CharSequence input = "HELLO";
+        List<CharSequence> expected = Arrays.<CharSequence>asList("HELLO$", "ELLO$H", "LLO$HE", "LO$HEL", "O$HELL", "$HELLO");
+        int index = 0;
+        for (CharSequence rotation : CharSequences.generateRotations(input, '$')) {
+            System.out.println(rotation);
+            Assert.assertEquals(expected.get(index++), rotation);
+        }
+        Assert.assertEquals("should generate expected number of rotations", expected.size(), index);
+    }
+
+    @Test(expected = UnsupportedOperationException.class)
+    public void testGenerateRotations_IteratorRemove() throws Exception {
+        final CharSequence input = "BANANAS";
+        Iterator<CharSequence> iterator = CharSequences.generateRotations(input, '$').iterator();
+        iterator.next();
+        iterator.remove();
+    }
+    @Test
     public void testGetCommonPrefix() throws Exception {
         Assert.assertEquals("BAN", CharSequences.getCommonPrefix("BANANA", "BANDANA"));
         Assert.assertEquals("BAN", CharSequences.getCommonPrefix("BAN", "BANDANA"));
